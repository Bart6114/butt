name: ci
on: 
  push:

jobs:
  golangci:
    runs-on: ubuntu-latest
    steps: 
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - uses: actions/setup-go@v2
        with:
          go-version: "^1.16"
      - uses: golangci/golangci-lint-action@v2

  tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - uses: actions/setup-go@v2
        with:
          go-version: "^1.16"
      - run: go install mvdan.cc/gofumpt@latest
      - name: run gofmt
        run: test -z $(gofumpt -l .)
      - name: run go vet
        run: go vet ./...
      - name: staticcheck install
        run: go install honnef.co/go/tools/cmd/staticcheck@latest
      - name: run staticcheck
        run: staticcheck ./...
      - name: run tests
        run: go test ./... -race -coverprofile=cover.out -covermode=atomic
      - uses: codecov/codecov-action@v2
        with:
          files: ./cover.out

  version_tag:
    needs: 
      - tests
      - golangci
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      new_tag: ${{ steps.tag_action.outputs.new_tag }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: Bump version and push tag
        id: tag_action
        uses: anothrNick/github-tag-action@1.36.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: true
          DEFAULT_BUMP: patch

  build:
    needs: version_tag
    runs-on: ubuntu-latest
    ## need decent versioning strategy in future
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        goos: [linux, darwin]
        goarch: ["386", amd64, arm64]
        exclude:
          - goarch: "386"
            goos: darwin
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - uses: actions/setup-go@v2
        with:
          go-version: "^1.16"
      ## above is fine to get latest for now, also save a copy with short sha
      - id: vars
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - run: mkdir -p ${{ matrix.goos }}/${{ matrix.goarch }}
      - run: env GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -ldflags="-X 'github.com/datarootsio/cheek/pkg.Version=${{ steps.vars.outputs.sha_short }}'" -o ${{ matrix.goos }}/${{ matrix.goarch }}
      - run: cp ${{ matrix.goos }}/${{ matrix.goarch }}/cheek ${{ matrix.goos }}/${{ matrix.goarch }}/cheek-${{ steps.vars.outputs.sha_short }}
      - run: cp ${{ matrix.goos }}/${{ matrix.goarch }}/cheek ${{ matrix.goos }}/${{ matrix.goarch }}/cheek-${{ needs.version_tag.outputs.new_tag }}
      ## upload binary to google storage
      - id: auth
        uses: google-github-actions/auth@v0.7.2
        with:
          credentials_json: ${{ secrets.gcp_credentials }}
      - id: upload-files
        uses: google-github-actions/upload-cloud-storage@v0.5.0
        with:
          path: ${{ matrix.goos }}/${{ matrix.goarch }}
          destination: better-unified
